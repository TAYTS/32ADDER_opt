.include "/Users/taytzushieh/Dropbox/SUTD/SCHOOL_STUFF/TERM4/50-002_Computation_Structures/Software_Lab/50002/nominal.jsim"
.include "/Users/taytzushieh/Dropbox/SUTD/SCHOOL_STUFF/TERM4/50-002_Computation_Structures/Software_Lab/50002/stdcell.jsim"
//.include "/Users/taytzushieh/Dropbox/SUTD/SCHOOL_STUFF/TERM4/50-002_Computation_Structures/Software_Lab/50002/lab3adder.jsim"
.include "/Users/taytzushieh/Dropbox/SUTD/SCHOOL_STUFF/TERM4/2D/checkoff2d/2dcheckoff_100ns.jsim"


* 3-input ADD3: inputs are A, b and C, output is S and C
.subckt FA a b ci s co
Xnand1 a b 1 nand2
Xnand2 a ci 2 nand2
Xnand3 b ci 3 nand2
Xnand4 1 2 3 co nand3
Xor1 a b 4 xor2
Xor2 4 ci s xor2
.ends


.subckt NOR4_SUB inp[3:0] z
Xnor4 inp[3] inp[2] inp[1] inp[0] z nor4
.ends


.subckt newAND A B z
Xnand0 A B N1 nand2 
Xnand1 N1 z inverter
.ends

.subckt newOR A B z
Xnor0 A B N1 nor2
Xnor1 N1 z inverter
.ends


* Compute the Z (All zero)
.subckt Z inp[31:0] z
Xnor0 inp[3:0]   N1 NOR4_SUB
Xnor1 inp[7:4]   N2 NOR4_SUB
Xnor2 inp[11:8]  N3 NOR4_SUB
Xnor3 inp[15:12] N4 NOR4_SUB
Xnor4 inp[19:16] N5 NOR4_SUB
Xnor5 inp[23:20] N6 NOR4_SUB
Xnor6 inp[27:24] N7 NOR4_SUB
Xnor7 inp[31:28] N8 NOR4_SUB

Xand0 N1 N2 A1 newAND
Xand1 A1 N3 A2 newAND
Xand2 A2 N4 A3 newAND
Xand3 A3 N5 A4 newAND
Xand4 A4 N6 A5 newAND
Xand5 A5 N7 A6 newAND
Xand6 A6 N8 z newAND


//Xand0 N1 N2 N3 N4 F1 and4
//Xand1 N5 N6 N7 N8 F2 and4
//Xand2 F1 F2 z and2
.ends


* Compute the V (Overflow)
.subckt V XA XB S v
Xinvs S  inv_s inverter
Xinva XA inv_a inverter
Xinvb XB inv_b inverter
Xand0 XA XB inv_s a0 and3
Xand1 inv_a inv_b S a1 and3
Xor0 a0 a1 v or2
.ends


* Compute the carry
.subckt CLA P[3:0] G[3:0] CI S[3:0] co

// S0
Xxor0 P0 CI S0 xor2

// S1
Xand1 P0 CI and_10_ newAND
Xor1 G0 and_10_ co_10_ newOR
Xxor1 P1 co_10_ S1 xor2

// S2	
Xand20 P0 CI and_20_ AND2
Xor20 G0 and_20_ co_20_ newOR
Xand21 P1 co_20_ and_21_ newAND
Xor21 G1 and_21_ co_21_ newOR
Xxor2 P2 co_21_ S2 xor2

// S3
Xand30 P0 CI and_30_ newAND
Xor30 G0 and_30_ co_30_ newOR
Xand31 P1 co_30_ and_31_ newAND
Xor31 G1 and_31_ co_31_ newOR
Xand32 P2 co_31_ and_32_ newAND
Xor32 G2 and_32_ co_32_ newOR
Xxor3 P3 co_32_ S3 xor2

// co3
Xand40 P0 CI and_40_ newAND
Xor40 G0 and_40_ co_40_ newOR
Xand41 P1 co_40_ and_41_ newAND
Xor41 G1 and_41_ co_41_ newOR
Xand42 P2 co_41_ and_42_ newAND
Xor42 G2 and_42_ co_42_ newOR
Xand43 P3 co_42_ and_43_ newAND
Xor43 G3 and_43_ co newOR

.ends


* 4 bit Carry Look Ahead
//.subckt CLA A[3:0] B[3:0] CI S[3:0] C3
//Xcla A[3:0] B[3:0] C[2:0] CI PS[3:0] C[3:0] carry
//Xxor2 C[2:0] CI PS[3:0] S[3:0] xor2
//.ends



* Pre-processing for Brent Kung Adder
* Calculate the P and G
.subckt PG A[31:0] B[31:0] P[31:0] G[31:0]
Xg A[31:0] B[31:0] G[31:0] AND2
Xp A[31:0] B[31:0] P[31:0] xor2
.ends


* Black Cell
.subckt BLACK GA PA GB PB Go Po
Xand1 PA GB andA AND2
Xand2 PA PB Po AND2
Xor1 GA andA Go OR2
.ends


* Grey cell
.subckt GREY GA PA GB Go
Xand1 PA GB andA AND2
Xor1 GA andA Go OR2
.ends


* Buffer cell
.subckt BUF GA PA Go Po
Xb1 GA Go buffer
Xb2 PA Po buffer
.ends




* 4 bit Carry Select
.subckt CSA A[3:0] B[3:0] CI S[3:0] Co
Xcla0 A[3:0] B[3:0] 0 SA[3:0] CA CLA
Xcla1 A[3:0] B[3:0] vdd SB[3:0] CB CLA
//Xcla1 A[3:0] b ci s co FA
XmuxC CI CA CB Co mux2
XmuxS0 CI#4 SA[3:0] SB[3:0] S[3:0] mux2
.ends

.subckt adder32 op0 A[31:0] B[31:0] s[31:0] z v n
// output s
Xxor B[31:0] op0#32 XB[31:0] xor2
//Xcla0 A[3:0] XB[3:0] op0 s[3:0] C0 CLA
//Xcla1 A[7:4] XB[7:4] C0 s[7:4] C1 CLA
//Xcla2 A[11:8] XB[11:8] C1 s[11:8] C2 CLA
//Xcla3 A[15:12] XB[15:12] C2 s[15:12] C3 CLA
//Xcla4 A[19:16] XB[19:16] C3 s[19:16] C4 CLA
//Xcla5 A[23:20] XB[23:20] C4 s[23:20] C5 CLA
//Xcla6 A[27:24] XB[27:24] C5 s[27:24] C6 CLA
//Xcla7 A[31:28] XB[31:28] C6 s[31:28] C7 CLA
//Xcla A[31:0] XB[31:0] C[6:0] op0 s[31:0] C[7:0] CLA
//Xcla A[31:0] XB[31:0] C[30:0] op0 PS[31:0] C[31:0] carry
//Xxor1 PS[31:0] C[30:0] op0 s[31:0] xor2

// tpd = 4.954
//Xcla0 A[3:0] XB[3:0] op0 s[3:0] C0 CLA
//Xcsa0 A[7:4] XB[7:4] C0 s[7:4] C1 CSA
//Xcsa1 A[11:8] XB[11:8] C1 s[11:8] C2 CSA
//Xcsa2 A[15:12] XB[15:12] C2 s[15:12] C3 CSA
//Xcsa3 A[19:16] XB[19:16] C3 s[19:16] C4 CSA
//Xcsa4 A[23:20] XB[23:20] C4 s[23:20] C5 CSA
//Xcsa5 A[27:24] XB[27:24] C5 s[27:24] C6 CSA
//Xcsa6 A[31:28] XB[31:28] C6 s[31:28] C7 CSA

// slowest
//Xadd0 A0 XB0 op0 s[0] c[0] FA
//Xadd1 A[30:1] XB[30:1] c[29:0] s[30:1] c[30:1] FA
//Xadd2 A[31] XB[31] c[30] s[31] co FA


// Pre-processing all the A and B
Xgp A[31:0] XB[31:0] P[31:0] G[31:0] PG


Xcla0 P[3:0] G[3:0] op0 S[3:0] co_3_ CLA
Xcsa1 P[7:4] G[7:4] co_3_ S[7:4] co_7_ CSA
Xcsa2 P[11:8] G[11:8] co_7_ S[11:8] co_11_ CSA
Xcsa3 P[15:12] G[15:12] co_11_ S[15:12] co_15_ CSA
Xcsa4 P[19:16] G[19:16] co_15_ S[19:16] co_19_ CSA
Xcsa5 P[23:20] G[23:20] co_19_ S[23:20] co_23_ CSA
Xcsa6 P[27:24] G[27:24] co_23_ S[27:24] co_27_ CSA
Xcsa7 P[31:28] G[31:28] co_27_ S[31:28] co_31_ CSA







// output z
Xz s[31:0] z Z

// output v
Xv A[31] XB[31] s[31] v V

// output n
.connect n s[31]
.ends